module Main where

-- Expected workflow :
--  operator(Elastik)-->InviteParticipant/InviteClient / AddParticipantToProject / InviteJudge / JudgeCriteria
--  participant-->AcceptParticipantRequest / AddEditProfile / AddEditsubmission / Addteammate / 
--  client--> CreateProject / CreatChallenge / AddEditProfile / AddJudgeToProject by client
--  judgs -->  VoteForProject(scorecard) 

-- anybody can be an operator ?? specify only one operator => once in production auth will fix the issue
-- participant should not be invited multiple times !! // auth will solve it
-- shoud not have two profiles // nonconsuming
-- *code optimization for profile

import Daml.Script
import DA.Date
import DA.Time
import DA.List
-- import DA.Set (Set)
-- import DA.Set qualified as S


-- All data in on place

data ClientProjectData =  ClientProjectData
  with
    client: Party 
    operator: Party 
    projectId: Text
    name: Text 
    desc: Text
    location: Text
    startDate: Time
    endDate: Time
    criteria: [CriteriaPoint]
    challenges: [Text]
    participants: [Party]
    judges: [Party]
    projects:[Text]
    public :Party
  deriving(Eq, Show)

data ChallengeData = ChallengeData
  with
    challengeId: Text 
    nameOf:Text
    prize: Text
    description: Text
  deriving(Eq, Show)
  
data ParticipantSubmissionData =  ParticipantSubmissionData
  with
    participant: Party 
    subName: Text 
    subDesc:  Text
    submission: Text
    -- challengeId: Text
  deriving(Eq, Show)

data CriteriaPoint = CriteriaPoint
  with
    name:Text
    point:Decimal
  deriving(Eq, Show)

data ProfileData = ProfileData
  with
    firstName:Text
    lastName:Text
    email:Text
    job:Text
    company:Text
    about:Text
    pictureUrl:Text
  deriving(Eq, Show)

data PrizeData = PrizeData
  with
    name:Text
    value:Text
    currency:Text
    description:Text
  deriving(Eq, Show)



----------------------------------------------------------------
template Registry
  with 
    projectKeys: [(Text,Party)]
    participantKeys: [(Text,Party)]
    participants: [Party]
    operator: Party 
  where 
    signatory operator

    key (operator) : (Party)
    maintainer key

    controller operator can 
      AddParticipantToProjectListing: ContractId Registry
        with 
          participant: Party 
          participantProfile: ProfileData
        do 
          -- add this new participants to all current project listings
          forA projectKeys
            $ \ (projKey,client)
              -> do
                -- exerciseByKey @ClientProjectListing (operator, projKey) AddParticipantToListing with participant 
                exerciseByKey @ClientProject (client, projKey) AddParticipantToGeneralPublic with participant 
         
         
          -- now add to the participant list so they can be added to new project listings
          let newParticipantKey = (participantProfile.email,participant)
          create this with participants = participant::participants, participantKeys = newParticipantKey::participantKeys
    
    -- controller operator can 
    --   AddObserversToUserRole: ContractId Registry
    --     with 
    --       participant: Party 
    --     do 
    --       -- add this new participants to all current project listings
    --       forA participantKeys
    --         $ \ (pemail,operator)
    --           -> do
    --             -- exerciseByKey @ClientProjectListing (operator, projKey) AddParticipantToListing with participant 
    --             exerciseByKey @UserRole (operator, pemail) AddMultipleObservers with newobservers=participants,requester=operator

          -- now add to the participant list so they can be added to new project listings
          -- create this with participants = participant::participants 


    controller operator can 
      AddProjectListing: ContractId Registry
        with 
          projectKey: Text 
          client: Party
        do 
          -- first add all current participants to this project listing
          -- exerciseByKey @ClientProjectListing (operator, projectKey) AddMultipleParticipantToListing with newParticipants = participants
          exerciseByKey @ClientProject(client, projectKey) AddGeneralPublic with newParticipants = participants
          -- now add project to registry 
          create this with projectKeys = (projectKey,client)::projectKeys, operator 
          


-- operator creates platform and registry
template Platform 
  with 
    operator: Party 
  where
    signatory operator

    controller operator can
      nonconsuming CreateRegistry: ContractId Registry
        do create Registry with projectKeys = [], participants = [], operator, participantKeys=[]    

template UserRoleRequest
  with 
    user:Party
    operator: Party -- 
    participantProfile:ProfileData
  where 
    signatory user
  
    controller operator can 
      AcceptUserRequest: ContractId UserRole
        do 
          (r1,r1o) <- fetchByKey @Registry (operator)
          us <- create UserRole with user,operator,participantProfile,observers=r1o.participants
          exerciseByKey @Registry (operator) AddParticipantToProjectListing with participant = user, participantProfile
          return us          

template UserRole --
  with 
    user:Party
    operator: Party  
    participantProfile:ProfileData
    observers:[Party]
  where 
    signatory user,operator
    observer observers
    key (operator,participantProfile.email): (Party, Text)
    maintainer key._1

    controller user can 
      AddClientAsObserver: ContractId UserRole
        with
          client: Party
        do create this with observers=client::observers

    controller operator can
      nonconsuming PromoteToClient: ContractId ClientRole
        do create ClientRole with client=user,operator,clientProfile=participantProfile
    
    -- choice AddMultipleObservers: ContractId UserRole
    --   with
    --     requester: Party
    --     newobservers: [Party]
    --   controller requester 
    --     do create this with observers=newobservers + observers -- cehck syntax
    
    -- controller operator can -- delete
    --   nonconsuming PromoteToJudge: ContractId JudgeRole
    --     do create JudgeRole with judge=user,operator,judgeProfile=participantProfile

    controller user can 
      UpdateParProfile: ContractId UserRole
        with
          newparticipantProfile:ProfileData
        do
          create this with participantProfile=newparticipantProfile,user,operator,observers

    controller user can 
      AddObserver: ContractId UserRole
        with
          partyId: Party
        do
          create this with observers=partyId::observers

-- Judge invitation / Request to join a hackathon
-- template JudgeRequestTojoin -- checkbox to chose this contract
--   with
--     judge: Party 
--     operator: Party
--     judgeProfile: ProfileData
--   where 
--     signatory judge 

--     controller operator can 
--       AcceptJudgeRequest: ContractId JudgeRole
--         do create JudgeRole with ..

-- template JudgeRole
--   with 
--     judge: Party 
--     operator: Party 
--     judgeProfile: ProfileData
--   where 
--     signatory judge, operator

--     controller judge can 
--       AddEditJudProfile: ContractId JudgeRole
--         with
--           newJudgeProfile:ProfileData
--         do
--           create this with judgeProfile=newJudgeProfile

--     controller judge can 
--       nonconsuming JudgeForProject: ContractId RequestToJudgeProject
--         with 
--           projectId: Text 
--           client: Party
--         do create RequestToJudgeProject with ..

template RequestToJudgeProject  
  with 
    judge: Party 
    client: Party
    operator: Party 
    projectId: Text
    judgemail: Text
  where 
    signatory judge 

    controller client can 
      AddJudgeToProject: ContractId ClientProject 
        do 
          -- o <- fetch @UserRole()
          exerciseByKey @ClientProject (client, projectId) AddJudge with judge, judgemail

--  ----------------------------------------------------------------

-- Participant invitation / Request to join a hackathon
-- template ParticipantRequestToJoin
--   with
--     participant: Party 
--     operator: Party
--     participantProfile: ProfileData
--   where 
--     signatory participant

--     controller operator can
--       AcceptParticipantRequest: ContractId ParticipantRole
--           do 
--             exerciseByKey @Registry (operator) AddParticipantToProjectListing with participant
--             create ParticipantRole with ..

-- template ParticipantRole
--   with 
--     participant: Party 
--     operator: Party
--     participantProfile:ProfileData
--   where 
--     signatory participant, operator 

--     key (operator,participantProfile.email):(Party,Text)
--     maintainer key._1

--     controller participant can 
--       UpdateParProfile: ContractId ParticipantRole
--         with
--           newparticipantProfile:ProfileData
--         do
--           create ParticipantRole with participantProfile=newparticipantProfile,participant,operator
    
    -- *** do this from ClientProjectListing instead
    -- controller participant can 
    --   nonconsuming RegisterForProject: ContractId RequestToJoinProject
    --     with 
    --       projectId: Text 
    --       client: Party
    --     do create RequestToJoinProject with ..


--  ----------------------------------------------------------------

-- client invitation
template ClientRequestToJoin -- checkbox / check if the cleintRole
  with
    client: Party 
    operator: Party
    clientProfile: ProfileData
  where 
    signatory client 

    controller operator can 
      AcceptRequest: ContractId ClientRole
        do create ClientRole with ..

template ClientRole
  with 
    client: Party 
    operator: Party 
    clientProfile: ProfileData
  where 
    signatory client, operator 
    
    controller client can 
      AddEditCliProfile: ContractId ClientRole 
        with
          newClientProfile:ProfileData
        do
          create this with clientProfile=newClientProfile

    controller client can 
      nonconsuming CreateProject: ContractId ClientProjectProposal 
        with 
          name: Text 
          desc: Text
          projectId: Text
          startDate: Time
          endDate: Time
          location: Text
          criteria: [CriteriaPoint]
          pictureUrl:Text
          rules: [Text]
          termsLink:Text
          privacyLink:Text
          prizes:[PrizeData]
          projectvideoLink: Text
          eligibility:[Text]
          requirements:[Text]
          projectStatus: Text
        do 
          create ClientProjectProposal with operator, client, projectId, location, startDate, endDate, name, desc, criteria,pictureUrl,challenges = [], participants = [], judges = [], projects=[], rules, termsLink,privacyLink,prizes,projectvideoLink,eligibility=[],requirements=[],projectStatus
--  ----------------------------------------------------------------

-- create a hackathon
template ClientProjectProposal
  with 
    client: Party 
    operator: Party 
    projectId: Text
    name: Text 
    desc: Text
    location: Text
    startDate: Time
    endDate: Time
    rules: [Text]
    termsLink:Text
    privacyLink:Text
    prizes:[PrizeData]
    criteria: [CriteriaPoint]
    challenges: [Text]
    participants: [Party]
    judges: [Party]
    projects:[Text]
    pictureUrl:Text
    projectvideoLink: Text
    eligibility:[Text]
    requirements:[Text]
    projectStatus: Text
  where
    signatory client 
    
    -- create a project listing for participants to see when they are not registered
    controller operator can 
      ApproveClientProject: ContractId Registry
        do 
          -- create project listing for participants to see online
          -- create ClientProjectListing with operator, client, projectId, name, participants = []
          -- now create actual project
          create ClientProject with operator, client, projectId, location, startDate, endDate, name, desc, criteria,pictureUrl,challenges = [], participants = [], judges = [], projects=[],rules,termsLink,privacyLink,prizes,generalPublic=[],projectvideoLink,requirements=[],eligibility=[],projectStatus
          -- add to registry
          exerciseByKey @Registry (operator) AddProjectListing with projectKey = projectId,client
          

template RequestToJoinProject
  with 
    participant: Party 
    client: Party
    operator: Party 
    projectId: Text
  where 
    signatory participant 

    controller client can 
      AddParticipantToProject: ContractId ClientProject 
        do 
          exerciseByKey @ClientProject (client, projectId) AddParticipant with participant

-- create a hackathon
template ClientProject
  with 
    client: Party 
    operator: Party 
    projectId: Text
    name: Text 
    desc: Text
    location: Text
    startDate: Time
    endDate: Time
    rules: [Text]
    termsLink:Text
    privacyLink:Text
    prizes:[PrizeData]
    criteria: [CriteriaPoint]
    challenges: [ChallengeData]
    participants: [Party]
    judges: [Party]
    projects:[Text]
    pictureUrl:Text
    generalPublic:[Party]
    projectvideoLink: Text
    eligibility:[Text]
    requirements:[Text]
    projectStatus: Text
  where
    signatory client, operator 
    observer participants,judges,generalPublic
    
    key (client,projectId): (Party, Text)
    maintainer key._1
    
    controller operator can 
      AddGeneralPublic: ContractId ClientProject
        with
          newParticipants:[Party]
        do 
          create this with generalPublic = newParticipants
      
    controller operator can 
      AddParticipantToGeneralPublic: ContractId ClientProject
        with
          participant:Party
        do 
          create this with generalPublic=participant::generalPublic

    controller client can 
       AddUpdateClientProject: ContractId ClientProject 
        with 
          newDesc: Text 
          newCriteria: [CriteriaPoint] 
          newlocation: Text
          newstartDate: Time
          newendDate: Time
          newrules: [Text]
          newtermsLink:Text
          newprivacyLink:Text
          newprizes:[PrizeData]
          newProjectvideoLink: Text
          neweligibility:[Text]
          newrequirements:[Text]
        do create this with client, name, desc=newDesc, challenges,criteria=newCriteria,location=newlocation,startDate=newstartDate,endDate=newendDate,rules=newrules, termsLink=newtermsLink,privacyLink=newprivacyLink,prizes=newprizes,projectvideoLink=newProjectvideoLink,eligibility=neweligibility,requirements=newrequirements

    controller client can 
       AddUpdateDescription: ContractId ClientProject 
        with 
          newDesc: Text 
        do create this with client, name, desc=newDesc, challenges

    controller client can 
      AddCriteria: ContractId ClientProject 
        with 
          newCriteria: CriteriaPoint 
        do 
          create this with client, name,desc, criteria=newCriteria::criteria, challenges

      -- DeleteCriteria: ContractId ClientProject 
      --   with 
      --     newCriteria: CriteriaPoint 
      --   do 
      --     let newList = delete newCriteria criteria
      --     create this with criteria=newList
        

    controller client can 
       AddChallenge: ContractId ClientProject 
        with 
          challengeId: Text 
          nameOf:Text
          prize: Text
          description: Text  
        do 
          let  challenge = ChallengeData with nameOf,prize,challengeId,description
          create this with challenges = challenge::challenges

    controller client can 
       ModifyChallenge: ContractId ClientProject 
        with 
          c1:[ChallengeData]
        do 
          create this with challenges = c1

    choice RemoveClientProject: ContractId ClosedClientProject
        with
          comment: Text
        controller client
        do create ClosedClientProject with ..

    -- controller client can 
    --    RemoveChallenge: ContractId ClientProject 
    --     with 
    --       challengeId: Text 
    --     do 
    --       -- remove an id from table
    --       create this with challenges = challengeId::challenges
    
    controller client can 
       AddParticipant: ContractId ClientProject 
        with 
          participant: Party 
        do create this with operator, client, name, desc, criteria, challenges, participants = participant::participants

    controller client can 
       AddJudge: ContractId ClientProject 
        with 
          judgemail: Text
          judge: Party 
        do 
          -- (c1,co) <- fetchByKey @UserRole (operator,judge) 
          forA projects
            $ \ projKey
              -> do
                -- exerciseByKey @ClientProjectListing (operator, projKey) AddParticipantToListing with participant  
                exerciseByKey @ParticipantSubmission (client, projKey) AddJudgToSubmission with judge
                -- exerciseByKey @UserRole (operator,judgemail) AddMultipleObservers with generalPublic
          create this with operator, client, name, desc, criteria, challenges, judges =judge::judges


    nonconsuming choice RequestToJudge: ContractId RequestToJudgeProject 
      with 
        judgemail: Text
        judge: Party
          controller judge 
            do 
               -- exerciseByKey @ClientProjectListing (operator, projKey) AddParticipantToListing with participant 
              exerciseByKey @UserRole (operator, judgemail) AddObserver with partyId=client 
              create RequestToJudgeProject with client, judge, operator, projectId, judgemail
          
          
    nonconsuming choice ProposeSubmission: ContractId ParticipantSubmissionProposal
        with
          generalPublicParticipant: Party 
          subName: Text 
          subDesc:  Text
          submission: Text
          videoLink: Text
          presentation: Text
          -- challengeId: [Text]
        controller generalPublicParticipant
        do
          -- check if participant exist on participants assert ?
          create ParticipantSubmissionProposal with participant=generalPublicParticipant,subName,subDesc,submission,client,projectId,operator,criteria,videoLink,presentation
          -- proj <- fetch p
          -- create this with projects = proj::projects 
        
    nonconsuming choice GiveAcessToUserRole: ContractId UserRole
        with
          generalPublicParticipant: Party 
          email: Text
        controller generalPublicParticipant
        do
          (c1,co) <- fetchByKey @UserRole (operator,email) 
          exerciseByKey @UserRole (operator,email) AddObserver with partyId=client

    controller client can 
      AddSubmissionToList: ContractId ClientProject 
        with 
          submissionId: Text 
        do create this with projects = submissionId::projects 

    -- choice AddJudgingPoint: ContractId ParticipantSubmission
    --     with
    --      judger: Party
    --      criteria1:CriteriaPoint
    --     controller judger
    --     do create this with judge=judger, criteria=criteria::criteria1

          

template ParticipantSubmissionProposal
  with 
    projectId: Text
    -- challengeId: [Text]
    participant: Party 
    subName: Text 
    subDesc:  Text
    submission: Text
    videoLink: Text
    presentation: Text
    client: Party
    operator: Party
    criteria: [CriteriaPoint]
  where 
    signatory participant

    controller client can
      AcceptSubmission: ContractId ParticipantSubmission
        with
          submissionId:Text
        do 
          (c1,co) <- fetchByKey @ClientProject (client,projectId) 

          exerciseByKey @ClientProject (client, projectId) AddSubmissionToList with submissionId

          create ParticipantSubmission with name=subName,participant,desc=subDesc,submission,client,participants=[],submissionId,judges=co.judges,operator,criteria,videoLink,presentation,projectId,steps=[]
          


-- -- Should create a challenge after all participants join the client hackathon
-- template Challenge
--    with
--     challengeId : Text
--     nameOf: Text 
--     prize: Text 
--     client: Party
--     description: Text
--     participants: [Party]
--     judges: [Party]
--     -- participant:Party
--     -- judge: Party

--   where
--     signatory client
--     observer participants

--     controller client can 
--       ModifieChallenge: ContractId Challenge
--         with
--           newname:Text
--           newprize:Text
--           newdescription:Text
--         do create this with nameOf = newname,prize=newprize,description=newdescription, client, challengeId

--     choice RemoveChallenge: ContractId ClosedChallenge
--         with
--           comment: Text
--         controller client
--         do create ClosedChallenge with ..
--  ----------------------------------------------------------------

-- create a submission
template ParticipantSubmission
  with 
    participant: Party 
    client: Party
    submissionId: Text
    -- challengeId: [Text]
    name: Text 
    desc:  Text
    submission: Text
    videoLink: Text
    presentation: Text
    -- challenges: [Text]
    participants: [Party]
    judges: [Party]
    operator: Party
    criteria: [CriteriaPoint] -- should be invisble to the participant
    projectId: Text
    steps:[Text]
  where
    signatory participant,client
    observer participants,judges,client,operator
    
    key (client,submissionId): (Party, Text)
    maintainer key._1

    controller client can 
      AddJudgToSubmission: ContractId ParticipantSubmission 
        with
          judge: Party
        do
          create this with judges=judge::judges

    controller participant can 
      UpdateSubmission: ContractId ParticipantSubmission 
        with 
          newDesc: Text 
          newName: Text 
          -- newchallengeId: Text
          newsubmission: Text
          newvideoLink: Text
          newpresentation: Text
          newSteps:[Text]
        do create this with  name=newName, desc=newDesc,submission=newsubmission,videoLink=newvideoLink,presentation=newpresentation,steps=newSteps
       
    choice RemoveSubmission: ContractId ClosedParticipantSubmission
        with
          comment: Text
        controller participant
        do create ClosedParticipantSubmission with ..
    --       p <- create ParticipantSubmission with participant,name= subName,desc= subDesc,submission,challengeId,client,participants
    --       proj <- fetch p
    --       create this with projects = proj::projects 
    
    controller participant can 
      nonconsuming ProposeTeammate: ContractId TeammateProposal 
        with 
          email: Text
        do 
        -- create this with participants=participantToAdd::participants
          create TeammateProposal with email,operator,submissionId,participant,client

    choice AddTeammate : ContractId ParticipantSubmission
        with 
          participantToAdd : Party
          leaderParticipant: Party
        controller leaderParticipant 
        do create this with  participants=participantToAdd::participants
    
    -- controller judge can
    --   JudgeProject : ContractId Scorecard
    --     with 
    --       -- p : Party
    --       subId: Text
    --       scores: [CriteriaPoint]
    --     do create Scorecard with scoretable=scores,client, submissionId=subId, judge 

    nonconsuming choice SubmitScorecard: ContractId Scorecard 
        with 
          scores: [CriteriaPoint] 
          judge: Party
          judgeComment: Text
          finalScore: Text
        controller judge 
          do create Scorecard with client,name, submissionId, scoretable=scores, judge,judgeComment,finalScore
          
--  ----------------------------------------------------------------

-- Add teammate

template TeammateProposal  
  with
    operator: Party
    submissionId: Text
    participant: Party
    email: Text
    client: Party
  where
    signatory participant

    controller operator can 
      AcceptTeammateProposal: ()
        do 
          (c1,co) <- fetchByKey @UserRole (operator,email) 
          exerciseByKey @ParticipantSubmission (client,submissionId) AddTeammate with participantToAdd=co.user,leaderParticipant=participant
          return ()
          


--  ----------------------------------------------------------------

-- profile : client, participant, Judge 

template ClientProfile
  with 
    client: Party
    clientProfile:ProfileData
  where 
    signatory client

    choice RemoveClientProfile: ContractId ClosedClientProfile
        with
          operator: Party
          comment: Text
        controller client
        do create ClosedClientProfile with ..

template JudgeProfile
  with 
    judge: Party 
    judgeProfile:ProfileData
  where 
    signatory judge

    -- choice RemoveJudgeProfile: ContractId ClosedJudgeProfile
    --     with
    --       operator: Party
    --       comment: Text
    --     controller judge
    --     do create ClosedJudgeProfile with ..

template ParticipantProfile
  with 
    participant: Party 
    participantProfile:ProfileData
  where 
    signatory participant


    -- choice RemoveParticipantProfile: ContractId ClosedParticipantProfile
    --     with
    --       operator: Party
    --       comment: Text
    --     controller participant
    --     do create ClosedParticipantProfile with ..


-- add the voting 

template Criteria
  with 
    judge: Party
    design: Decimal
    idea: Decimal
    code:Decimal
  where
    signatory judge

--  ----------------------------------------------------------------

-- Client / Participant removed project 

template ClosedParticipantSubmission
  with 
    participant: Party 
    client: Party
    submissionId: Text
    -- challengeId: Text
    name: Text 
    desc:  Text
    submission: Text
    videoLink: Text
    presentation: Text
    -- challenges: [Text]
    participants: [Party]
    -- judges: Party
    operator: Party
    comment:Text
  where
    signatory participant
    observer operator

template ClosedClientProject
  with  
    client: Party 
    operator: Party 
    projectId: Text
    name: Text 
    desc: Text
    location: Text
    startDate: Time
    endDate: Time
    criteria: [CriteriaPoint]
    challenges: [ChallengeData]
    participants: [Party]
    judges: [Party]
    projects:[Text]
    comment:Text
  where
    signatory client 
    observer operator

template ClosedChallenge
   with
    -- challengeId : Text
    nameOf: Text 
    prize: Text 
    client: Party
    description: Text
    participants: [Party]
    judges: [Party]
    -- participant:Party
    -- judge: Party

  where
    signatory client

template ClosedClientProfile
  with 
    client: Party
    operator: Party
    clientProfile:ProfileData
    comment:Text
  where
    signatory client 
    observer operator

template ClosedJudgeProfile
  with 
    judge: Party
    operator: Party
    judgeProfile:ProfileData
    comment:Text
  where
    signatory judge 
    observer operator

template ClosedParticipantProfile
  with 
    participant: Party
    operator: Party
    participantProfile:ProfileData
    comment:Text
  where
    signatory participant 
    observer operator
--  ----------------------------------------------------------------
        
template Scorecard
    with 
        client: Party 
        name: Text
        submissionId : Text
        -- participant: Party 
        judge: Party 
        scoretable: [CriteriaPoint]
        judgeComment: Text
        finalScore: Text
     where 
        signatory judge  
        observer client 
        key (judge, submissionId): (Party, Text)
        maintainer key._1

        controller judge can
            ModifyScorecard: ContractId Scorecard 
              with 
                scores: [CriteriaPoint]  
              do 
                create this with scoretable=scores
          



setup = script do
  elastik <- allocatePartyWithHint "Elastik" (PartyIdHint "Elastik")
  andy <- allocatePartyWithHint "Andy" (PartyIdHint "Andy")
  asx <- allocatePartyWithHint "Asx" (PartyIdHint "Asx")
  mohammed <- allocatePartyWithHint "Mohammed" (PartyIdHint "Mohammed")
  yuling <- allocatePartyWithHint "Yuling" (PartyIdHint "Yuling")

  let userProfile = ProfileData with firstName="Andy",lastName="ke",email="andy@dabl.com",job="engineer",company="",about="",pictureUrl=""
  let clientProfile = ProfileData with firstName="Asx",lastName="Asx",email="asx@dabl.com",job="engineer",company="",about="",pictureUrl=""
  let judgeProfile = ProfileData with firstName="Yuling",lastName="Yu",email="yuling@dabl.com",job="judge",company="",about="",pictureUrl=""
  let userProfile1 = ProfileData with firstName="Mohammed",lastName="Id",email="med@dabl.com",job="engineer",company="",about="",pictureUrl=""

  platform <- submit elastik do
    createCmd Platform with
      operator = elastik
  registry <- submit elastik do
    exerciseCmd platform CreateRegistry 

  -- UserRoleRequest <- submit andy do
  --   createCmd UserRoleRequest with 
  --     user = andy, operator = elastik, userProfileData=userProfile
  -- AcceptUserRequest <- submit elastik do
  --   exerciseCmd participantRequest AcceptParticipantRequest

  
  userRoleRequest <- submit andy do
    createCmd UserRoleRequest with user = andy, operator = elastik, participantProfile=userProfile
  acceptUserRequest <- submit elastik do
    exerciseCmd userRoleRequest AcceptUserRequest

  userRoleRequest <- submit yuling do
    createCmd UserRoleRequest with user = yuling, operator = elastik, participantProfile=judgeProfile
  acceptUserRequest <- submit elastik do
    exerciseCmd userRoleRequest AcceptUserRequest

  userRoleRequest <- submit asx do
    createCmd UserRoleRequest with user = asx, operator = elastik, participantProfile=clientProfile
  acceptUserRequest <- submit elastik do
    exerciseCmd userRoleRequest AcceptUserRequest

  -- userRoleRequest <- submit mohammed do
  --   createCmd UserRole with user = mohammed, operator = elastik,participantProfile=userProfile1
  -- AcceptUserRequest <- submit elastik do
  --   exerciseCmd participantRequest AcceptParticipantRequest

  -- UserRoleRequest <- submit asx do
  --   createCmd UserRoleRequest with user = asx, operator = elastik, participantProfile=clientProfile 
  -- AcceptUserRequest <- submit elastik do
  --   exerciseCmd clientRequest AcceptRequest

  -- judgeRequest <- submit yuling do
  --   createCmd UserRoleRequest with user = yuling, operator = elastik 
  -- clientRole <- submit elastik do
  --   exerciseCmd judgeRequest AcceptJudgeRequest

  -- clientRole <- submit asx do
  --   createCmd CreateProject with name="proj1",desc="description",projectId="11",startDate=datetime 1970 Jan 2 0 0 0,endDate=datetime 1970 Jan 2 0 0 0,location="online",criteria=[],pictureUrl="pic.com"
  -- ClientProjectProposal <- submit elastik do
  --   exerciseCmd clientRole AcceptJudgeRequest



  -- invite <- submit elastik do
  --   exerciseCmd ClientInvitation CreateProject with
  --     client = asx
  -- client <- submit asx do
  --   exerciseCmd invite AcceptRequest
  pure ()




  -- bobTV <- submit alice do
  --   exerciseCmd aliceTV Give with newOwner = bob

  -- submit bob do
  --   exerciseCmd bobTV Give with newOwner = alice



-- template ClientProjectListing
--   with 
--     operator:Party
--     client:Party
--     projectId: Text
--     name:Text
--     participants:[Party]
--   where
--   signatory operator
--   observer participants

--   key(operator,projectId) :(Party,Text)
--   maintainer key._1

--   controller operator can 
--     AddParticipantToListing: ContractId ClientProjectListing
--       with
--         participant:Party
--       do create this with participants=participant::participants

--   controller operator can 
--     AddMultipleParticipantToListing: ContractId ClientProjectListing
--       with
--         newParticipants:[Party]
--       do 
--         create this with participants = newParticipants
        

--   nonconsuming choice SubmitRequestToJoinProject: ContractId RequestToJoinProject
--     with 
--       participant: Party
--     controller participant 
--     do 
--       --(c1,co) <- fetchByKey @ParticipantRole (operator,email) 
--       create RequestToJoinProject with ..