module Main where


-- Expected workflow :
--  operator(Elastik)-->InviteParticipant/InviteClient / AddParticipantToProject / InviteJudge / JudgeCriteria
--  participant-->AcceptParticipantRequest / AddEditProfile / AddEditsubmission / Addteammate / 
--  client--> CreateProject / CreatChallenge / AddEditProfile / AddJudgeToProject by client
--  judgs -->  *VoteForProject(SpecifyRating) 

-- anybody can be an operator ?? specify only one operator => once in production auth will fix the issue
-- participant should not be invited multiple times !! // auth will solve it
-- shoud not have two profiles // nonconsuming

import Daml.Script
-- import DA.Date

-- data Challenge = Challenge
--   with
--     name: Text 
--     prize: Text 
--   deriving(Eq, Show)

-- invite all parties
template Platform 
  with 
    operator: Party 
  where
    signatory operator

    controller operator can
      nonconsuming InviteClient: ContractId ClientInvitation
        with 
          client: Party 
        do create ClientInvitation with ..

    controller operator can
      nonconsuming InviteParticipant: ContractId ParticipantInvitation
        with 
          participant: Party 
        do create ParticipantInvitation with ..

    controller operator can
      nonconsuming InviteJudge: ContractId JudgeInvitation
        with 
          judge: Party 
        do create JudgeInvitation with .. 

--  ----------------------------------------------------------------

-- Judge invitation / Request to join a hackathon
template JudgeInvitation
  with
    judge: Party 
    operator: Party
  where 
    signatory operator 

    controller judge can 
      AcceptjudgeRequest: ContractId JudgeRole
        do create JudgeRole with ..

template JudgeRole
  with 
    judge: Party 
    operator: Party 
  where 
    signatory judge, operator

    controller judge can 
      nonconsuming AddEditJudProfile: ContractId JudgeProfile
        with
          first:Text
          last:Text
          email:Text
        do
          create JudgeProfile with ..

    controller judge can 
      nonconsuming JudgeForProject: ContractId RequestToJudgeProject
        with 
          projectId: Text 
          client: Party
        do create RequestToJudgeProject with ..

template RequestToJudgeProject
  with 
    judge: Party 
    client: Party
    operator: Party 
    projectId: Text
  where 
    signatory judge 

    controller judge can 
      AddJudgeToProject: ContractId ClientProject 
        do 
          exerciseByKey @ClientProject (client, projectId) AddJudge with judge

--  ----------------------------------------------------------------

-- Participant invitation / Request to join a hackathon
template ParticipantInvitation
  with
    participant: Party 
    operator: Party
  where 
    signatory operator 

    controller participant can 
      AcceptParticipantRequest: ContractId ParticipantRole
        do create ParticipantRole with ..

template ParticipantRole
  with 
    participant: Party 
    operator: Party 
  where 
    signatory participant, operator 

    controller participant can 
      AddParProfile: ContractId ParticipantProfile
        with
          first:Text
          last:Text
          email:Text
        do
          create ParticipantProfile with ..

    controller participant can 
      nonconsuming RegisterForProject: ContractId RequestToJoinProject
        with 
          projectId: Text 
          client: Party
        do create RequestToJoinProject with ..

template RequestToJoinProject
  with 
    participant: Party 
    client: Party
    operator: Party 
    projectId: Text
  where 
    signatory participant 

    controller operator can 
      AddParticipantToProject: ContractId ClientProject 
        do 
          exerciseByKey @ClientProject (client, projectId) AddParticipant with participant

--  ----------------------------------------------------------------

-- client invitation
template ClientInvitation
  with
    client: Party 
    operator: Party
  where 
    signatory operator 

    controller client can 
      AcceptRequest: ContractId ClientRole
        do create ClientRole with ..

template ClientRole
  with 
    client: Party 
    operator: Party 
  where 
    signatory client, operator 
    
    controller client can 
      nonconsuming AddEditCliProfile: ContractId ClientProfile
        with
          first:Text
          last:Text
          email:Text
        do
          create ClientProfile with ..

    controller client can 
      nonconsuming CreateProject: ContractId ClientProject 
        with 
          name: Text 
          projectId: Text
        do 
          create ClientProject with operator, client, projectId, name, desc = "", criteria = "", challenges = [], participants = [], judges = [],projects=[]

--  ----------------------------------------------------------------

-- create a hackathon
template ClientProject
  with 
    client: Party 
    operator: Party 
    projectId: Text
    name: Text 
    desc:  Text
    criteria: Text
    challenges: [Text]
    participants: [Party]
    judges: [Party]
    projects:[Text]
  where
    signatory client 
    observer participants
    observer judges
    
    key (client,projectId): (Party, Text)
    maintainer key._1

    controller client can 
       AddUpdateDescription: ContractId ClientProject 
        with 
          newDesc: Text 
        do create this with client, name, desc=newDesc, challenges

    controller client can 
       AddUpdateCriteria: ContractId ClientProject 
        with 
          newCriteria: Text 
        do create this with client, name,desc, criteria= newCriteria, challenges

    controller client can 
       AddChallenge: ContractId ClientProject 
        with 
          challengeId: Text 
          nameOf:Text
          prize: Text
        do 
          id <- create Challenge with client,nameOf,prize,challengeId
          create this with challenges = challengeId::challenges

    controller client can 
       RemoveChallenge: ContractId ClientProject 
        with 
          challengeId: Text 
        do 
          -- remove an id from table
          create this with challenges = challengeId::challenges
    
    controller operator can 
       AddParticipant: ContractId ClientProject 
        with 
          participant: Party 
        do create this with operator, client, name, desc, criteria, challenges, participants = participant::participants

    controller client can 
       AddJudge: ContractId ClientProject 
        with 
          judge: Party 
        do create this with operator, client, name, desc, criteria, challenges, judges = judge::judges

    nonconsuming choice ProposeSubmission: ContractId ParticipantSubmissionProposal
        with
          participant: Party 
          subName: Text 
          subDesc:  Text
          submission: Text
        controller participant
        do
          create ParticipantSubmissionProposal with participant,subName,subDesc,submission,client,projectId
          -- proj <- fetch p
          -- create this with projects = proj::projects 

    controller client can 
       AddSubmissionToList: ContractId ClientProject 
        with 
          submissionId: Text 
        do create this with projects = submissionId::projects 
          

template ParticipantSubmissionProposal
  with 
   projectId: Text
   participant: Party 
   subName: Text 
   subDesc:  Text
   submission: Text
   client: Party
  where 
    signatory participant

    controller client can
      AcceptSubmission: ContractId ParticipantSubmission
        with
          submissionId:Text
        do 
          exerciseByKey @ClientProject (client, projectId) AddSubmissionToList with submissionId
          create ParticipantSubmission with name=subName,participant,desc=subDesc,submission,client,participants=[],submissionId
          







template Challenge
   with
    challengeId : Text
    nameOf: Text 
    prize: Text 
    client: Party
  where
    signatory client

    controller client can 
      ModifieChallenge: ContractId Challenge
        with
          name1:Text
          prize1:Text
        do create this with nameOf = name1,prize=prize1, client, challengeId
    

  




--  ----------------------------------------------------------------

-- create a submission
template ParticipantSubmission
  with 
    participant: Party 
    client: Party
    submissionId: Text
    name: Text 
    desc:  Text
    submission: Text
    -- challenges: [Text]
    participants: [Party]
  where
    signatory participant,client 
    observer participants
    observer client
    
    key (participant,submissionId): (Party, Text)
    maintainer key._1

    controller participant can 
      UpdateSubmission: ContractId ParticipantSubmission 
        with 
          newDesc: Text 
          newName: Text 
        do create this with  name=newName, desc=newDesc
  
    -- choice RemoveSubmission: ContractId ClientProject
    --     with
    --       participant: Party 
    --       subName: Text 
    --       subDesc:  Text
    --       submission: Text
    --       challengeId: Text
    --     controller participant
    --     do
    --       p <- create ParticipantSubmission with participant,name= subName,desc= subDesc,submission,challengeId,client,participants
    --       proj <- fetch p
    --       create this with projects = proj::projects 
    
    controller participant can 
       AddTeammate: ContractId ParticipantSubmission 
        with 
          participantToAdd: Party
        do create this with participants=participantToAdd::participants
        

--  ----------------------------------------------------------------

-- profile : client, participant, Judge 

template ClientProfile
  with 
    client: Party 
    first: Text 
    last:  Text
    email: Text
  where 
    signatory client

template ParticipantProfile
  with 
    participant: Party 
    first: Text 
    last:  Text
    email: Text
  where 
    signatory participant

template JudgeProfile
  with 
    judge: Party 
    first: Text 
    last:  Text
    email: Text
  where 
    signatory judge


-- add the voting

setup = script do
  elastik <- allocatePartyWithHint "Elastik" (PartyIdHint "Elastik")
  -- bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")

  aliceTV <- submit elastik do
    createCmd Platform with
      operator = elastik
  pure ()

  -- bobTV <- submit alice do
  --   exerciseCmd aliceTV Give with newOwner = bob

  -- submit bob do
  --   exerciseCmd bobTV Give with newOwner = alice
